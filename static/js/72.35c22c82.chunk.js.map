{"version":3,"file":"static/js/72.35c22c82.chunk.js","mappings":"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","sources":["helpers/notification/index.ts","helpers/validationSchemas/addContactSchema.ts","helpers/validationSchemas/editContactSchema.ts","helpers/validationSchemas/logInSchema.ts","helpers/validationSchemas/signInSchema.ts","components/LogInForm/LoginForm.tsx","pages/Login/Login.tsx"],"sourcesContent":["import { toast } from 'react-toastify';\n\nexport const notificationError = () =>\n  toast.error('Woops, something get wrong, try again!', {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n\nexport const notificationExcistContact = (name: string) =>\n  toast.warning(`${name}is already in contacts`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n","import * as Yup from 'yup';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const addContactSchema = Yup.object().shape({\n  name: Yup.string().required().min(4),\n  number: Yup.string()\n    .required()\n    .matches(phoneRegExp, 'Phone number is not valid'),\n});\n","import * as Yup from 'yup';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const editContactSchema = Yup.object().shape({\n  name: Yup.string().required(\"Name can't be empty\").min(4),\n  number: Yup.string()\n    .required(\"Phone number can't be empty\")\n    .matches(phoneRegExp, 'Phone number is not valid'),\n});\n","import * as Yup from 'yup';\n\nexport const logInSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Email must be a valid')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(4, 'Password is too short - should be 4 chars minimum'),\n});\n","import * as Yup from 'yup';\n\nexport const signInSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Name is required')\n    .min(4, 'Name is too short - should be 4 chars minimum'),\n  email: Yup.string()\n    .email('Email must be a valid')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(4, 'Password is too short - should be 4 chars minimum'),\n});\n","import Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport { notificationError } from 'helpers/notification';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport { useFormik } from 'formik';\nimport { login } from 'redux/auth/operations';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@mui/material';\nimport { logInSchema } from 'helpers/validationSchemas';\nimport { useAppDispatch } from 'redux/store';\n\nexport const LoginForm = () => {\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    initialValues: { email: '', password: '' },\n    validationSchema: logInSchema,\n    onSubmit: async (userInfo, { resetForm }) => {\n      const fetch = await dispatch(login(userInfo));\n      fetch.meta.requestStatus === 'rejected'\n        ? notificationError()\n        : resetForm();\n    },\n    validateOnChange: false,\n    validateOnBlur: false,\n  });\n  const emailError = formik.errors.email;\n  const passwordError = formik.errors.password;\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        py: 2,\n      }}\n    >\n      <Avatar sx={{ bgcolor: 'secondary.main' }}>\n        <LockOutlinedIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 3 }}>\n        Sign in\n      </Typography>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              error={Boolean(emailError)}\n              helperText={emailError}\n              fullWidth\n              required\n              id=\"email\"\n              name=\"email\"\n              label=\"Email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              error={Boolean(passwordError)}\n              helperText={passwordError}\n              fullWidth\n              required\n              id=\"password\"\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n            />\n          </Grid>\n        </Grid>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          fullWidth\n          type=\"submit\"\n          sx={{ mt: 3, mb: 1 }}\n        >\n          Log In\n        </Button>\n      </form>\n      <Link to=\"/register\" component={RouterLink} variant=\"body2\">\n        Don't have an account? Sign Up\n      </Link>\n    </Box>\n  );\n};\n","import { Container } from '@mui/material';\nimport { LoginForm } from 'components/LogInForm';\nconst Login = () => {\n  return (\n    <Container maxWidth=\"xl\">\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default Login;\n"],"names":["notificationError","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","notificationExcistContact","name","addContactSchema","Yup","shape","required","min","number","matches","editContactSchema","logInSchema","email","password","signInSchema","username","LoginForm","dispatch","useAppDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","userInfo","resetForm","login","meta","requestStatus","validateOnChange","validateOnBlur","emailError","errors","passwordError","Box","sx","display","flexDirection","alignItems","py","Avatar","bgcolor","LockOutlined","Typography","component","variant","mb","handleSubmit","noValidate","Grid","container","spacing","item","xs","TextField","error","Boolean","helperText","fullWidth","id","label","value","values","onChange","handleChange","type","Button","color","mt","Link","to","RouterLink","Container","maxWidth"],"sourceRoot":""}