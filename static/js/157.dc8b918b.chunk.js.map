{"version":3,"file":"static/js/157.dc8b918b.chunk.js","mappings":"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","sources":["helpers/notification/index.ts","helpers/validationSchemas/addContactSchema.ts","helpers/validationSchemas/editContactSchema.ts","helpers/validationSchemas/logInSchema.ts","helpers/validationSchemas/signInSchema.ts","components/RegisterForm/RegisterForm.tsx","pages/Register/Register.tsx"],"sourcesContent":["import { toast } from 'react-toastify';\n\nexport const notificationError = () =>\n  toast.error('Woops, something get wrong, try again!', {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n\nexport const notificationExcistContact = (name: string) =>\n  toast.warning(`${name}is already in contacts`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n","import * as Yup from 'yup';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const addContactSchema = Yup.object().shape({\n  name: Yup.string().required().min(4),\n  number: Yup.string()\n    .required()\n    .matches(phoneRegExp, 'Phone number is not valid'),\n});\n","import * as Yup from 'yup';\n\nconst phoneRegExp =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nexport const editContactSchema = Yup.object().shape({\n  name: Yup.string().required(\"Name can't be empty\").min(4),\n  number: Yup.string()\n    .required(\"Phone number can't be empty\")\n    .matches(phoneRegExp, 'Phone number is not valid'),\n});\n","import * as Yup from 'yup';\n\nexport const logInSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Email must be a valid')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(4, 'Password is too short - should be 4 chars minimum'),\n});\n","import * as Yup from 'yup';\n\nexport const signInSchema = Yup.object().shape({\n  username: Yup.string()\n    .required('Name is required')\n    .min(4, 'Name is too short - should be 4 chars minimum'),\n  email: Yup.string()\n    .email('Email must be a valid')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(4, 'Password is too short - should be 4 chars minimum'),\n});\n","import Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport { useFormik } from 'formik';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Link } from '@mui/material';\nimport { register } from 'redux/auth/operations';\nimport { signInSchema } from 'helpers/validationSchemas';\nimport { notificationError } from 'helpers/notification';\nimport { useAppDispatch } from 'redux/store';\n\nexport const RegisterForm = () => {\n  const dispatch = useAppDispatch();\n  const formik = useFormik({\n    initialValues: { username: '', email: '', password: '' },\n    validationSchema: signInSchema,\n    onSubmit: async ({ username: name, email, password }, { resetForm }) => {\n      const fetch = await dispatch(register({ name, email, password }));\n      fetch.meta.requestStatus === 'rejected'\n        ? notificationError()\n        : resetForm();\n    },\n    validateOnChange: false,\n    validateOnBlur: false,\n  });\n  const nameError = formik.errors.username;\n  const emailError = formik.errors.email;\n  const passwordError = formik.errors.password;\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        py: 2,\n      }}\n    >\n      <Avatar sx={{ mb: 1, bgcolor: 'secondary.main' }}>\n        <LockOutlinedIcon />\n      </Avatar>\n      <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 3 }}>\n        Sign up\n      </Typography>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <TextField\n              error={Boolean(nameError)}\n              helperText={nameError}\n              autoComplete=\"given-name\"\n              name=\"username\"\n              required\n              fullWidth\n              id=\"username\"\n              label=\"Name\"\n              value={formik.values.username}\n              onChange={formik.handleChange}\n              autoFocus\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              error={Boolean(emailError)}\n              helperText={emailError}\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              error={Boolean(passwordError)}\n              helperText={passwordError}\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              autoComplete=\"new-password\"\n            />\n          </Grid>\n        </Grid>\n        <Button\n          sx={{ mt: 3, mb: 1 }}\n          type=\"submit\"\n          fullWidth\n          variant=\"contained\"\n        >\n          Register\n        </Button>\n      </form>\n      <Link to=\"/login\" component={RouterLink} variant=\"body2\">\n        Already have an account? Sign in\n      </Link>\n    </Box>\n  );\n};\n","import { Container } from '@mui/material';\nimport { RegisterForm } from 'components/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Container maxWidth=\"xl\">\n      <RegisterForm />;\n    </Container>\n  );\n};\n\nexport default Register;\n"],"names":["notificationError","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","notificationExcistContact","name","addContactSchema","Yup","shape","required","min","number","matches","editContactSchema","logInSchema","email","password","signInSchema","username","RegisterForm","dispatch","useAppDispatch","formik","useFormik","initialValues","validationSchema","onSubmit","resetForm","register","meta","requestStatus","validateOnChange","validateOnBlur","nameError","errors","emailError","passwordError","Box","sx","display","flexDirection","alignItems","py","Avatar","mb","bgcolor","LockOutlined","Typography","component","variant","handleSubmit","noValidate","Grid","container","spacing","item","xs","TextField","error","Boolean","helperText","autoComplete","fullWidth","id","label","value","values","onChange","handleChange","autoFocus","type","Button","mt","Link","to","RouterLink","Container","maxWidth"],"sourceRoot":""}